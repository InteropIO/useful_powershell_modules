function Get-M365DefenderVulnerabilityReport {
    <#
    .SYNOPSIS
    Function process vulnerabilities returned by Get-M365DefenderMachineVulnerability, process them and returns as custom PSObject.

    .DESCRIPTION
    Function process vulnerabilities returned by Get-M365DefenderMachineVulnerability, process them and returns as custom PSObject.

    .PARAMETER groupBy
    Possible values: machine, productName

    .PARAMETER severity
    Possible values: Low, Medium, High, Critical

    By default Critical.

    .PARAMETER skipOSVuln
    Switch for skipping Operating System vulnerabilities.

    .PARAMETER header
    Header created using New-M365DefenderAuthHeader.

    .EXAMPLE
    $header = New-M365DefenderAuthHeader

    $vulnerabilityPerMachine = Get-M365DefenderVulnerabilityReport -groupBy machine -header $header -skipOSVuln -severity Critical
    #>

    [CmdletBinding()]
    param (
        [ValidateSet('machine', 'productName')]
        [string] $groupBy,

        [ValidateSet('Low', 'Medium', 'High', 'Critical', ignorecase = $False)]
        [string[]] $severity = "Critical",

        [switch] $skipOSVuln,

        $header
    )

    if (!$header) {
        $header = New-M365DefenderAuthHeader -ErrorAction Stop
    }

    $machineVulnerability = Get-M365DefenderMachineVulnerability -header $header -severity $severity

    if ($skipOSVuln) {
        $machineVulnerability = $machineVulnerability | ? productName -NotIn "windows_10", "windows_11", "mac_os"
    }

    # get all machines to be able to translate id to dnsname
    $allMachines = Get-M365DefenderMachine -header $header

    if ($groupBy -eq "machine") {
        $vulnGroupedByMachineId = $machineVulnerability | group MachineId

        foreach ($groupedData in $vulnGroupedByMachineId) {
            $machineId = $groupedData.Name

            $groupSw = $groupedData.group | group productName, productVersion
            $VulnSW = $groupSw | % {
                [PSCustomObject]@{
                    VulnSW         = (@($_.Group.productName)[0] + ", " + @($_.Group.productVersion)[0])
                    productName    = @($_.Group.productName)[0]
                    productVersion = @($_.Group.productVersion)[0]
                    productVendor  = @($_.Group.productVendor)[0]
                    cveId          = $_.Group.cveId
                    fixingKbId     = $_.Group.fixingKbId
                }
            }

            [PSCustomObject]@{
                ComputerName = ($allMachines.where({ $_.Id -eq $machineId })).computerDnsName
                MachineId    = $machineId
                VulnSW       = $groupSw.Name
                VulnSWData   = $VulnSW
            }
        }
    } elseif ($groupBy -eq "productName") {
        $vulnGroupedByProdName = $machineVulnerability | group productName

        foreach ($groupedData in $vulnGroupedByProdName) {
            $productName = $groupedData.Name

            $groupSw = $groupedData.group | group productName, productVersion
            $VulnSW = $groupSw | % {
                $machineId = $_.group.machineid | select -Unique
                [PSCustomObject]@{
                    VulnSW         = (@($_.Group.productName)[0] + ", " + @($_.Group.productVersion)[0])
                    productName    = @($_.Group.productName)[0]
                    productVersion = @($_.Group.productVersion)[0]
                    productVendor  = @($_.Group.productVendor)[0]
                    cveId          = $_.Group.cveId | select -Unique
                    fixingKbId     = $_.Group.fixingKbId
                    machineid      = $machineId
                    ComputerName   = ($allMachines.where({ $_.Id -in $machineId })).computerDnsName
                }
            }

            [PSCustomObject]@{
                ProductName  = $productName
                ComputerName = (($allMachines.where({ $_.Id -in $groupedData.group.machineid })).computerDnsName | sort)
                MachineId    = $groupedData.group.machineid | select -Unique
                VulnSW       = $groupSw.Name
                VulnSWData   = $VulnSW
            }
        }
    } else {
        # don't group the results
        $machineVulnerability | select *, @{n = 'ComputerName'; e = { $machineId = $_.MachineId; ($allMachines.where({ $_.Id -eq $machineId })).computerDnsName } }
    }
}